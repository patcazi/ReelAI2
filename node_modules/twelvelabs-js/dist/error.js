"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalServerError = exports.TooManyRequestsError = exports.ConflictError = exports.MethodNotAllowedError = exports.NotFoundError = exports.ForbiddenError = exports.UnauthorizedError = exports.BadRequestError = exports.APITimeoutError = exports.APIConnectionError = exports.APIError = exports.TwelveLabsError = void 0;
class TwelveLabsError extends Error {
}
exports.TwelveLabsError = TwelveLabsError;
class APIError extends Error {
    constructor(message, status, body, headers, request) {
        super(message);
        this.name = this.constructor.name;
        this.status = status;
        this.body = body;
        this.headers = headers;
        this.request = request;
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
exports.APIError = APIError;
class APIConnectionError extends APIError {
    constructor(message = 'Connection error.', body) {
        super(message, undefined, body);
    }
}
exports.APIConnectionError = APIConnectionError;
class APITimeoutError extends APIError {
    constructor(message = 'Request timed out.', body) {
        super(message, undefined, body);
    }
}
exports.APITimeoutError = APITimeoutError;
class BadRequestError extends APIError {
}
exports.BadRequestError = BadRequestError;
class UnauthorizedError extends APIError {
}
exports.UnauthorizedError = UnauthorizedError;
class ForbiddenError extends APIError {
}
exports.ForbiddenError = ForbiddenError;
class NotFoundError extends APIError {
}
exports.NotFoundError = NotFoundError;
class MethodNotAllowedError extends APIError {
}
exports.MethodNotAllowedError = MethodNotAllowedError;
class ConflictError extends APIError {
}
exports.ConflictError = ConflictError;
class TooManyRequestsError extends APIError {
}
exports.TooManyRequestsError = TooManyRequestsError;
class InternalServerError extends APIError {
}
exports.InternalServerError = InternalServerError;
//# sourceMappingURL=error.js.map
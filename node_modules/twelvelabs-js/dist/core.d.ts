export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
export type RequestOptions = RequestInit & {
    params?: Record<string, any>;
    skipCamelKeys?: string[];
};
export interface APIClientOptions {
    baseUrl: string;
    apiKey: string;
}
export declare class APIClient {
    baseUrl: string;
    apiKey: string;
    constructor({ baseUrl, apiKey }: APIClientOptions);
    private _request;
    _get<T>(endpoint: string, params?: Record<string, any>, options?: RequestOptions): Promise<T>;
    _post<T>(endpoint: string, data?: any, options?: RequestOptions): Promise<T>;
    _patch<T>(endpoint: string, data?: any, options?: RequestOptions): Promise<T>;
    _put<T>(endpoint: string, data?: any, options?: RequestOptions): Promise<T>;
    _delete<T>(endpoint: string, options?: RequestOptions): Promise<T>;
}
export declare function handleResponse(response: Response, body: any, request?: RequestInit): void;
//# sourceMappingURL=core.d.ts.map
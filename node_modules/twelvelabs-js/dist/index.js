"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InternalServerError = exports.UnauthorizedError = exports.TooManyRequestsError = exports.NotFoundError = exports.MethodNotAllowedError = exports.ForbiddenError = exports.ConflictError = exports.BadRequestError = exports.APITimeoutError = exports.APIConnectionError = exports.TwelveLabsError = exports.SegmentEmbedding = exports.Embedding = exports.CreateEmbeddingsResult = exports.EmbeddingsTaskStatus = exports.EmbeddingsTaskListWithPagination = exports.EmbeddingsTask = exports.SearchResult = exports.TaskListWithPagination = exports.Task = exports.VideoListWithPagination = exports.Video = exports.IndexListWithPagination = exports.Index = exports.TwelveLabs = void 0;
const core_1 = require("./core.js");
const Resources = __importStar(require("./resources/index.js"));
const constants_1 = require("./constants.js");
class TwelveLabs extends core_1.APIClient {
    constructor({ apiKey, version = constants_1.LATEST_API_VERSION }) {
        if (version !== constants_1.LATEST_API_VERSION) {
            throw new Error(`[Warning] You manually set the API version to ${version}, but this SDK version is not fully compatible with current API version, please use version 0.3.x or earlier`);
        }
        if (!apiKey) {
            throw new Error('Provide `apiKey` to initialize a client. You can see the API Key in the Dashboard page: https://dashboard.playground.io');
        }
        const customBaseUrl = process.env.TWELVELABS_BASE_URL;
        const baseUrl = `${customBaseUrl || constants_1.BASE_URL}/${version}/`;
        super({ baseUrl, apiKey });
        this.baseUrl = baseUrl;
        this.apiKey = apiKey;
        this.index = new Resources.Index(this);
        this.task = new Resources.Task(this);
        this.search = new Resources.Search(this);
        this.generate = new Resources.Generate(this);
        this.embed = new Resources.Embed(this);
    }
}
exports.TwelveLabs = TwelveLabs;
var models_1 = require("./models/index.js");
Object.defineProperty(exports, "Index", { enumerable: true, get: function () { return models_1.Index; } });
Object.defineProperty(exports, "IndexListWithPagination", { enumerable: true, get: function () { return models_1.IndexListWithPagination; } });
Object.defineProperty(exports, "Video", { enumerable: true, get: function () { return models_1.Video; } });
Object.defineProperty(exports, "VideoListWithPagination", { enumerable: true, get: function () { return models_1.VideoListWithPagination; } });
Object.defineProperty(exports, "Task", { enumerable: true, get: function () { return models_1.Task; } });
Object.defineProperty(exports, "TaskListWithPagination", { enumerable: true, get: function () { return models_1.TaskListWithPagination; } });
Object.defineProperty(exports, "SearchResult", { enumerable: true, get: function () { return models_1.SearchResult; } });
Object.defineProperty(exports, "EmbeddingsTask", { enumerable: true, get: function () { return models_1.EmbeddingsTask; } });
Object.defineProperty(exports, "EmbeddingsTaskListWithPagination", { enumerable: true, get: function () { return models_1.EmbeddingsTaskListWithPagination; } });
Object.defineProperty(exports, "EmbeddingsTaskStatus", { enumerable: true, get: function () { return models_1.EmbeddingsTaskStatus; } });
Object.defineProperty(exports, "CreateEmbeddingsResult", { enumerable: true, get: function () { return models_1.CreateEmbeddingsResult; } });
Object.defineProperty(exports, "Embedding", { enumerable: true, get: function () { return models_1.Embedding; } });
Object.defineProperty(exports, "SegmentEmbedding", { enumerable: true, get: function () { return models_1.SegmentEmbedding; } });
var error_1 = require("./error.js");
Object.defineProperty(exports, "TwelveLabsError", { enumerable: true, get: function () { return error_1.TwelveLabsError; } });
Object.defineProperty(exports, "APIConnectionError", { enumerable: true, get: function () { return error_1.APIConnectionError; } });
Object.defineProperty(exports, "APITimeoutError", { enumerable: true, get: function () { return error_1.APITimeoutError; } });
Object.defineProperty(exports, "BadRequestError", { enumerable: true, get: function () { return error_1.BadRequestError; } });
Object.defineProperty(exports, "ConflictError", { enumerable: true, get: function () { return error_1.ConflictError; } });
Object.defineProperty(exports, "ForbiddenError", { enumerable: true, get: function () { return error_1.ForbiddenError; } });
Object.defineProperty(exports, "MethodNotAllowedError", { enumerable: true, get: function () { return error_1.MethodNotAllowedError; } });
Object.defineProperty(exports, "NotFoundError", { enumerable: true, get: function () { return error_1.NotFoundError; } });
Object.defineProperty(exports, "TooManyRequestsError", { enumerable: true, get: function () { return error_1.TooManyRequestsError; } });
Object.defineProperty(exports, "UnauthorizedError", { enumerable: true, get: function () { return error_1.UnauthorizedError; } });
Object.defineProperty(exports, "InternalServerError", { enumerable: true, get: function () { return error_1.InternalServerError; } });
//# sourceMappingURL=index.js.map
import { RequestOptions } from '../../core';
import * as Resources from '../../resources';
import { PageInfo } from '../interfaces';
import { SearchResult } from '../search';
import { Task } from '../task';
import { Video } from '../video';
export interface IndexResponse {
    id: string;
    indexName: string;
    models: IndexModelResponse[];
    videoCount: number;
    totalDuration: number;
    createdAt: string;
    updatedAt?: string;
    expiresAt?: string;
}
export declare class Index {
    private readonly _resource;
    id: string;
    name: string;
    models: IndexModel[];
    videoCount: number;
    totalDuration: number;
    createdAt: string;
    updatedAt?: string;
    constructor(resource: Resources.Index, data: IndexResponse);
    retrieve(options?: RequestOptions): Promise<Index>;
    update(name: string, options?: RequestOptions): Promise<void>;
    delete(options?: RequestOptions): Promise<void>;
    createTask(body: Omit<Resources.CreateTaskParams, 'indexId'>, options?: RequestOptions): Promise<Task>;
    listVideos(params?: Resources.ListVideoParams, options?: RequestOptions): Promise<Video[]>;
    query(body: Omit<Resources.SearchOptions, 'indexId'>, options?: RequestOptions): Promise<SearchResult>;
}
export declare class IndexListWithPagination {
    private readonly _resource;
    private readonly _originParams;
    data: Index[];
    pageInfo: PageInfo;
    constructor(resource: Resources.Index, originParams: Resources.ListIndexParams, data: IndexResponse[], pageInfo: PageInfo);
    next(): Promise<Index[] | null>;
}
interface IndexModelResponse {
    id: string;
    modelName: string;
    modelOptions: ('visual' | 'audio' | 'conversation' | 'text_in_video' | 'logo')[];
    addons?: string[];
    finetuned?: boolean;
}
declare class IndexModel {
    id: string;
    name: string;
    options: ('visual' | 'audio' | 'conversation' | 'text_in_video' | 'logo')[];
    addons?: string[];
    finetuned?: boolean;
    constructor(res: IndexModelResponse);
}
export {};
//# sourceMappingURL=index.d.ts.map
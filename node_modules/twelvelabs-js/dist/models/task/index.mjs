export class Task {
    constructor(resource, data) {
        this._resource = resource;
        this.id = data.id;
        this.indexId = data.indexId;
        this.videoId = data.videoId;
        this.status = data.status;
        this.systemMetadata = data.systemMetadata;
        this.hls = data.hls;
        this.createdAt = data.createdAt;
        this.updatedAt = data.updatedAt;
    }
    async retrieve(options = {}) {
        return await this._resource.retrieve(this.id, options);
    }
    async delete(options = {}) {
        await this._resource.delete(this.id, options);
    }
    async waitForDone(sleepInterval = 5000, callback) {
        const isDone = () => this.status === 'ready' || this.status === 'failed';
        if (sleepInterval <= 0) {
            throw new Error('sleepInterval must be greater than 0');
        }
        while (!isDone()) {
            await this.sleep(sleepInterval);
            try {
                const task = await this.retrieve();
                this.status = task.status;
                this.systemMetadata = task.systemMetadata;
            }
            catch (err) {
                console.warn(`Retrieving task failed: ${err.message}, retrying..`);
                continue;
            }
            if (callback) {
                callback(this);
            }
        }
        return this;
    }
    sleep(ms) {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
}
export class TaskListWithPagination {
    constructor(resource, originParams, data, pageInfo) {
        this._resource = resource;
        this._originParams = originParams;
        this.data = data.map((v) => new Task(resource, v));
        this.pageInfo = pageInfo;
    }
    async next() {
        if (this.pageInfo.page >= this.pageInfo.totalPage) {
            return null;
        }
        const params = { ...this._originParams };
        params.page = this.pageInfo.page + 1;
        const res = await this._resource.listPagination(params);
        this.pageInfo = res.pageInfo;
        return res.data;
    }
}
//# sourceMappingURL=index.mjs.map
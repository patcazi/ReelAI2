import { RequestOptions } from '../../core';
import * as Resources from '../../resources';
import { PageInfo } from '../interfaces';
export interface EmbeddingMediaMetadata {
    inputUrl?: string;
    inputFilename?: string;
    videoClipLength?: number;
    videoEmbeddingScope?: string[];
    duration?: number;
}
export interface EmbeddingResponse {
    segments?: SegmentEmbeddingResponse[];
    errorMessage?: string;
    metadata?: EmbeddingMediaMetadata;
}
export declare class Embedding {
    segments?: SegmentEmbedding[];
    errorMessage?: string;
    metadata?: EmbeddingMediaMetadata;
    constructor(data: EmbeddingResponse);
}
export interface SegmentEmbeddingResponse {
    float?: number[];
    startOffsetSec?: number;
    endOffsetSec?: number;
    embeddingScope?: string;
}
export declare class SegmentEmbedding {
    embeddingsFloat?: number[];
    startOffsetSec?: number;
    endOffsetSec?: number;
    embeddingScope?: string;
    constructor(data: SegmentEmbeddingResponse);
}
export interface CreateEmbeddingsResultResponse {
    modelName: string;
    textEmbedding?: EmbeddingResponse;
    imageEmbedding?: EmbeddingResponse;
    videoEmbedding?: EmbeddingResponse;
    audioEmbedding?: EmbeddingResponse;
}
export declare class CreateEmbeddingsResult {
    modelName: string;
    textEmbedding?: Embedding;
    imageEmbedding?: Embedding;
    videoEmbedding?: Embedding;
    audioEmbedding?: Embedding;
    constructor(data: CreateEmbeddingsResultResponse);
}
export interface EmbeddingsTaskStatusResponse {
    id: string;
    modelName: string;
    status: string;
    videoEmbedding?: EmbeddingResponse;
}
export declare class EmbeddingsTaskStatus {
    id: string;
    modelName: string;
    status: string;
    videoEmbedding?: Embedding;
    constructor(data: EmbeddingsTaskStatusResponse);
}
export interface EmbeddingsTaskResponse {
    id: string;
    modelName: string;
    status: string;
    videoEmbedding?: EmbeddingResponse;
    createdAt?: string;
}
export declare class EmbeddingsTask {
    private readonly _resource;
    id: string;
    modelName: string;
    status: string;
    videoEmbedding?: Embedding;
    createdAt?: string;
    constructor(resource: Resources.EmbedTask, data: EmbeddingsTaskResponse);
    retrieve(options?: RequestOptions): Promise<EmbeddingsTask>;
    getStatus(options?: RequestOptions): Promise<string>;
    waitForDone(sleepInterval?: number, callback?: (task: EmbeddingsTask) => void): Promise<string>;
    private sleep;
}
export declare class EmbeddingsTaskListWithPagination {
    private readonly _resource;
    private readonly _originParams;
    data: EmbeddingsTask[];
    pageInfo: PageInfo;
    constructor(resource: Resources.EmbedTask, originParams: Resources.ListEmbeddingsTaskParams, data: EmbeddingsTaskResponse[], pageInfo: PageInfo);
    next(): Promise<EmbeddingsTask[] | null>;
}
//# sourceMappingURL=index.d.ts.map
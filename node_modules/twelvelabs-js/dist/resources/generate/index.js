"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Generate = void 0;
const Models = __importStar(require("../../models/index.js"));
const resource_1 = require("../../resource.js");
const util_1 = require("../../util.js");
class Generate extends resource_1.APIResource {
    async summarize(videoId, type, prompt, temperature, options = {}) {
        const _body = (0, util_1.convertKeysToSnakeCase)({
            videoId,
            type,
            prompt,
            temperature,
        });
        const res = await this._post('summarize', (0, util_1.removeUndefinedValues)(_body), options);
        return res;
    }
    async gist(videoId, types, options = {}) {
        const _body = (0, util_1.convertKeysToSnakeCase)({
            videoId,
            types,
        });
        const res = await this._post('gist', _body, options);
        return res;
    }
    async text(videoId, prompt, temperature, options = {}) {
        const _body = (0, util_1.convertKeysToSnakeCase)({
            videoId,
            prompt,
            temperature,
            stream: false,
        });
        const res = await this._post('generate', (0, util_1.removeUndefinedValues)(_body), options);
        return res;
    }
    async textStream({ videoId, prompt, temperature }, options = {}) {
        const _body = (0, util_1.convertKeysToSnakeCase)({
            videoId,
            prompt,
            temperature,
            stream: true,
        });
        const res = await this._post('generate', (0, util_1.removeUndefinedValues)(_body), options);
        return new Models.GenerateTextStreamResult((0, util_1.trackStream)(res));
    }
}
exports.Generate = Generate;
//# sourceMappingURL=index.js.map
import * as Models from "../../models/index.mjs";
import { APIResource } from "../../resource.mjs";
import { convertKeysToSnakeCase, handleComparisonParams, removeUndefinedValues } from "../../util.mjs";
import { Video as VideoResource } from "../video/index.mjs";
export class Index extends APIResource {
    constructor(client) {
        super(client);
        this.video = new VideoResource(client);
    }
    async retrieve(id, options = {}) {
        const res = await this._get(`indexes/${id}`, {}, options);
        return new Models.Index(this, res);
    }
    async list({ id, name, createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const _params = convertKeysToSnakeCase({
            ...restParams,
            _id: id,
            indexName: name,
        });
        handleComparisonParams(_params, 'createdAt', createdAt);
        handleComparisonParams(_params, 'updatedAt', updatedAt);
        const res = await this._get('indexes', removeUndefinedValues(_params), options);
        return res.data.map((v) => new Models.Index(this, v));
    }
    async listPagination({ id, name, createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const originParams = { id, name, createdAt, updatedAt, ...restParams };
        const _params = convertKeysToSnakeCase({
            ...restParams,
            _id: id,
            indexName: name,
        });
        handleComparisonParams(_params, 'createdAt', createdAt);
        handleComparisonParams(_params, 'updatedAt', updatedAt);
        const res = await this._get('indexes', removeUndefinedValues(_params), options);
        return new Models.IndexListWithPagination(this, originParams, res.data, res.pageInfo);
    }
    async create({ name, models, addons }, options = {}) {
        const _body = {
            indexName: name,
            models: models.map(({ name, options }) => ({ modelName: name, modelOptions: options })),
            addons,
        };
        const res = await this._post('indexes', removeUndefinedValues(convertKeysToSnakeCase(_body)), options);
        return await this.retrieve(res.id);
    }
    async update(id, name, options = {}) {
        await this._put(`indexes/${id}`, convertKeysToSnakeCase({
            indexName: name,
        }), options);
    }
    async delete(id, options = {}) {
        await this._delete(`indexes/${id}`, options);
    }
}
//# sourceMappingURL=index.mjs.map
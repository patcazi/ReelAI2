"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Index = void 0;
const Models = __importStar(require("../../models/index.js"));
const resource_1 = require("../../resource.js");
const util_1 = require("../../util.js");
const video_1 = require("../video/index.js");
class Index extends resource_1.APIResource {
    constructor(client) {
        super(client);
        this.video = new video_1.Video(client);
    }
    async retrieve(id, options = {}) {
        const res = await this._get(`indexes/${id}`, {}, options);
        return new Models.Index(this, res);
    }
    async list({ id, name, createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const _params = (0, util_1.convertKeysToSnakeCase)({
            ...restParams,
            _id: id,
            indexName: name,
        });
        (0, util_1.handleComparisonParams)(_params, 'createdAt', createdAt);
        (0, util_1.handleComparisonParams)(_params, 'updatedAt', updatedAt);
        const res = await this._get('indexes', (0, util_1.removeUndefinedValues)(_params), options);
        return res.data.map((v) => new Models.Index(this, v));
    }
    async listPagination({ id, name, createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const originParams = { id, name, createdAt, updatedAt, ...restParams };
        const _params = (0, util_1.convertKeysToSnakeCase)({
            ...restParams,
            _id: id,
            indexName: name,
        });
        (0, util_1.handleComparisonParams)(_params, 'createdAt', createdAt);
        (0, util_1.handleComparisonParams)(_params, 'updatedAt', updatedAt);
        const res = await this._get('indexes', (0, util_1.removeUndefinedValues)(_params), options);
        return new Models.IndexListWithPagination(this, originParams, res.data, res.pageInfo);
    }
    async create({ name, models, addons }, options = {}) {
        const _body = {
            indexName: name,
            models: models.map(({ name, options }) => ({ modelName: name, modelOptions: options })),
            addons,
        };
        const res = await this._post('indexes', (0, util_1.removeUndefinedValues)((0, util_1.convertKeysToSnakeCase)(_body)), options);
        return await this.retrieve(res.id);
    }
    async update(id, name, options = {}) {
        await this._put(`indexes/${id}`, (0, util_1.convertKeysToSnakeCase)({
            indexName: name,
        }), options);
    }
    async delete(id, options = {}) {
        await this._delete(`indexes/${id}`, options);
    }
}
exports.Index = Index;
//# sourceMappingURL=index.js.map
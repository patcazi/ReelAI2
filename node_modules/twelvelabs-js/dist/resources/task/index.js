"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = exports.TaskTransfer = void 0;
const Models = __importStar(require("../../models/index.js"));
const util_1 = require("../../util.js");
const resource_1 = require("../../resource.js");
class TaskTransfer extends resource_1.APIResource {
    async importVideos({ integrationId, ...restParams }, options = {}) {
        const _params = (0, util_1.convertKeysToSnakeCase)(restParams);
        const res = await this._post(`tasks/transfers/import/${integrationId}`, (0, util_1.removeUndefinedValues)(_params), options);
        return res;
    }
    async importStatus(integrationId, indexId, options = {}) {
        const _params = (0, util_1.convertKeysToSnakeCase)({ indexId });
        const res = await this._get(`tasks/transfers/import/${integrationId}/status`, (0, util_1.removeUndefinedValues)(_params), options);
        return res;
    }
    async importLogs(integrationId, options = {}) {
        const res = await this._get(`tasks/transfers/import/${integrationId}/logs`, {}, options);
        return res.data || [];
    }
}
exports.TaskTransfer = TaskTransfer;
class Task extends resource_1.APIResource {
    constructor(client) {
        super(client);
        this.transfers = new TaskTransfer(client);
    }
    async retrieve(id, options = {}) {
        const res = await this._get(`tasks/${id}`, {}, options);
        return new Models.Task(this, res);
    }
    async list({ createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const _params = (0, util_1.convertKeysToSnakeCase)(restParams);
        (0, util_1.handleComparisonParams)(_params, 'createdAt', createdAt);
        (0, util_1.handleComparisonParams)(_params, 'updatedAt', updatedAt);
        const res = await this._get('tasks', (0, util_1.removeUndefinedValues)(_params), options);
        return res.data.map((v) => new Models.Task(this, v));
    }
    async listPagination({ createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const originParams = { createdAt, updatedAt, ...restParams };
        const _params = (0, util_1.convertKeysToSnakeCase)(restParams);
        (0, util_1.handleComparisonParams)(_params, 'createdAt', createdAt);
        (0, util_1.handleComparisonParams)(_params, 'updatedAt', updatedAt);
        const res = await this._get('tasks', (0, util_1.removeUndefinedValues)(_params), options);
        return new Models.TaskListWithPagination(this, originParams, res.data, res.pageInfo);
    }
    async create(body, options = {}) {
        if (!body.file && !body.url) {
            throw new Error('Either file or url must be provided');
        }
        const formData = new util_1.FormDataImpl();
        formData.append('index_id', body.indexId);
        if (body.url)
            formData.append('video_url', body.url);
        if (body.transcriptionUrl)
            formData.append('transcription_url', body.transcriptionUrl);
        if (body.language)
            formData.append('language', body.language);
        if (body.enableVideoStream)
            formData.append('enable_video_stream', String(body.enableVideoStream));
        try {
            if (body.file)
                (0, util_1.attachFormFile)(formData, 'video_file', body.file);
            if (body.transcriptionFile) {
                (0, util_1.attachFormFile)(formData, 'transcription_file', body.transcriptionFile);
                formData.append('provide_transcription', 'true');
            }
        }
        catch (err) {
            throw err;
        }
        const res = await this._post('tasks', formData, options);
        return await this.retrieve(res.id);
    }
    async createBulk(indexId, { files, urls, language, enableVideoStream, }, options = {}) {
        if (!files && !urls) {
            throw new Error('Either files or urls must be provided');
        }
        const tasks = [];
        if (files) {
            for (const file of files) {
                try {
                    const task = await this.create({ indexId, file, language, enableVideoStream }, options);
                    tasks.push(task);
                }
                catch (e) {
                    console.error(`Error processing file ${file}:`, e);
                }
            }
        }
        if (urls) {
            for (const url of urls) {
                try {
                    const task = await this.create({ indexId, url, language, enableVideoStream }, options);
                    tasks.push(task);
                }
                catch (e) {
                    console.error(`Error processing url ${url}:`, e);
                }
            }
        }
        return tasks;
    }
    async delete(id, options = {}) {
        await this._delete(`tasks/${id}`, options);
    }
}
exports.Task = Task;
//# sourceMappingURL=index.js.map
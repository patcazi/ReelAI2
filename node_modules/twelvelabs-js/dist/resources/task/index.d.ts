/// <reference types="node" />
import { RequestOptions } from '../../core';
import * as Models from '../../models';
import { CreateTaskParams, ListTaskParams, TransferImportParams } from './interfaces';
import { APIResource } from '../../resource';
import { TwelveLabs } from '../..';
export declare class TaskTransfer extends APIResource {
    importVideos({ integrationId, ...restParams }: TransferImportParams, options?: RequestOptions): Promise<Models.TransferImportResponse>;
    importStatus(integrationId: string, indexId: string, options?: RequestOptions): Promise<Models.TransferImportStatusResponse>;
    importLogs(integrationId: string, options?: RequestOptions): Promise<Models.TransferImportLog[]>;
}
export declare class Task extends APIResource {
    transfers: TaskTransfer;
    constructor(client: TwelveLabs);
    retrieve(id: string, options?: RequestOptions): Promise<Models.Task>;
    list({ createdAt, updatedAt, ...restParams }?: ListTaskParams, options?: RequestOptions): Promise<Models.Task[]>;
    listPagination({ createdAt, updatedAt, ...restParams }?: ListTaskParams, options?: RequestOptions): Promise<Models.TaskListWithPagination>;
    create(body: CreateTaskParams, options?: RequestOptions): Promise<Models.Task>;
    createBulk(indexId: string, { files, urls, language, enableVideoStream, }: {
        files?: (string | Buffer | null)[];
        urls?: string[];
        language?: string;
        enableVideoStream?: boolean;
    }, options?: RequestOptions): Promise<Models.Task[]>;
    delete(id: string, options?: RequestOptions): Promise<void>;
}
//# sourceMappingURL=index.d.ts.map
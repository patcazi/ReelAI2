"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Video = void 0;
const Models = __importStar(require("../../models/index.js"));
const resource_1 = require("../../resource.js");
const util_1 = require("../../util.js");
class Video extends resource_1.APIResource {
    async retrieve(indexId, id, { embed } = {}, options = {}) {
        const _params = (0, util_1.convertKeysToSnakeCase)({ embed });
        const res = await this._get(`indexes/${indexId}/videos/${id}`, (0, util_1.removeUndefinedValues)(_params), { ...options, skipCamelKeys: ['metadata'] });
        return new Models.Video(this, indexId, res);
    }
    async list(indexId, { size, width, height, duration, fps, createdAt, updatedAt, indexedAt, ...restParams } = {}, options = {}) {
        const _params = (0, util_1.convertKeysToSnakeCase)(restParams);
        (0, util_1.handleComparisonParams)(_params, 'size', size);
        (0, util_1.handleComparisonParams)(_params, 'width', width);
        (0, util_1.handleComparisonParams)(_params, 'height', height);
        (0, util_1.handleComparisonParams)(_params, 'duration', duration);
        (0, util_1.handleComparisonParams)(_params, 'fps', fps);
        (0, util_1.handleComparisonParams)(_params, 'createdAt', createdAt);
        (0, util_1.handleComparisonParams)(_params, 'updatedAt', updatedAt);
        (0, util_1.handleComparisonParams)(_params, 'indexedAt', indexedAt);
        const res = await this._get(`indexes/${indexId}/videos`, (0, util_1.removeUndefinedValues)(_params), { ...options, skipCamelKeys: ['user_metadata'] });
        return res.data.map((v) => new Models.Video(this, indexId, v));
    }
    async listPagination(indexId, { size, width, height, duration, fps, createdAt, updatedAt, indexedAt, ...restParams } = {}, options = {}) {
        const originParams = {
            size,
            width,
            height,
            duration,
            fps,
            createdAt,
            updatedAt,
            indexedAt,
            ...restParams,
        };
        const _params = (0, util_1.convertKeysToSnakeCase)(restParams);
        (0, util_1.handleComparisonParams)(_params, 'size', size);
        (0, util_1.handleComparisonParams)(_params, 'width', width);
        (0, util_1.handleComparisonParams)(_params, 'height', height);
        (0, util_1.handleComparisonParams)(_params, 'duration', duration);
        (0, util_1.handleComparisonParams)(_params, 'fps', fps);
        (0, util_1.handleComparisonParams)(_params, 'createdAt', createdAt);
        (0, util_1.handleComparisonParams)(_params, 'updatedAt', updatedAt);
        (0, util_1.handleComparisonParams)(_params, 'indexedAt', indexedAt);
        const res = await this._get(`indexes/${indexId}/videos`, (0, util_1.removeUndefinedValues)(_params), { ...options, skipCamelKeys: ['user_metadata'] });
        return new Models.VideoListWithPagination(this, originParams, indexId, res.data, res.pageInfo);
    }
    async update(indexId, id, { userMetadata }, options = {}) {
        await this._put(`indexes/${indexId}/videos/${id}`, (0, util_1.removeUndefinedValues)((0, util_1.convertKeysToSnakeCase)({ userMetadata })), options);
    }
    async delete(indexId, id, options = {}) {
        await this._delete(`indexes/${indexId}/videos/${id}`, options);
    }
}
exports.Video = Video;
//# sourceMappingURL=index.js.map
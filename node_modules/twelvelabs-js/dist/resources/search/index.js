"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Search = void 0;
const Models = __importStar(require("../../models/index.js"));
const resource_1 = require("../../resource.js");
const util_1 = require("../../util.js");
class Search extends resource_1.APIResource {
    async query({ indexId, queryText, queryMediaType, queryMediaFile, queryMediaUrl, options: searchOptions, groupBy, threshold, operator, filter, pageLimit, sortOption, adjustConfidenceLevel, }, options = {}) {
        if (!queryText && !queryMediaFile && !queryMediaUrl) {
            throw new Error('Either `queryText`, `queryMediaFile`, or `queryMediaUrl` must be provided');
        }
        const formData = new util_1.FormDataImpl();
        formData.append('index_id', indexId);
        if (queryText)
            formData.append('query_text', queryText);
        if (queryMediaType)
            formData.append('query_media_type', queryMediaType);
        if (queryMediaUrl)
            formData.append('query_media_url', queryMediaUrl);
        if (searchOptions) {
            searchOptions.forEach((option) => formData.append('search_options', option));
        }
        if (groupBy)
            formData.append('group_by', groupBy);
        if (threshold)
            formData.append('threshold', threshold);
        if (operator)
            formData.append('operator', operator);
        if (filter)
            formData.append('filter', JSON.stringify(filter));
        if (pageLimit)
            formData.append('page_limit', String(pageLimit));
        if (sortOption)
            formData.append('sort_option', sortOption);
        if (adjustConfidenceLevel)
            formData.append('adjust_confidence_level', String(adjustConfidenceLevel));
        try {
            if (queryMediaFile)
                (0, util_1.attachFormFile)(formData, 'query_media_file', queryMediaFile);
        }
        catch (err) {
            throw err;
        }
        const res = await this._post('search', formData, options);
        return new Models.SearchResult(this, res);
    }
    async byPageToken(pageToken, options = {}) {
        const res = await this._get(`search/${pageToken}`, {}, options);
        return new Models.SearchResult(this, res);
    }
}
exports.Search = Search;
//# sourceMappingURL=index.js.map
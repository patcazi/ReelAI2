"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Embed = exports.EmbedTask = void 0;
const form_data_1 = __importDefault(require("form-data"));
const Models = __importStar(require("../../models/index.js"));
const resource_1 = require("../../resource.js");
const util_1 = require("../../util.js");
class EmbedTask extends resource_1.APIResource {
    async retrieve(id, options = {}) {
        const res = await this._get(`embed/tasks/${id}`, {}, options);
        return new Models.EmbeddingsTask(this, res);
    }
    async list(params = {}, options = {}) {
        const _params = (0, util_1.convertKeysToSnakeCase)(params);
        const res = await this._get('embed/tasks', (0, util_1.removeUndefinedValues)(_params), options);
        return res.data.map((v) => new Models.EmbeddingsTask(this, v));
    }
    async listPagination(params = {}, options = {}) {
        const _params = (0, util_1.convertKeysToSnakeCase)(params);
        const res = await this._get('embed/tasks', (0, util_1.removeUndefinedValues)(_params), options);
        return new Models.EmbeddingsTaskListWithPagination(this, params, res.data, res.pageInfo);
    }
    async create(modelName, { file, url, startOffsetSec, endOffsetSec, clipLength, scopes }, options = {}) {
        if (!file && !url) {
            throw new Error('Either video file or url must be provided');
        }
        const formData = new form_data_1.default();
        formData.append('model_name', modelName);
        if (url)
            formData.append('video_url', url);
        if (startOffsetSec)
            formData.append('video_start_offset_sec', startOffsetSec);
        if (endOffsetSec)
            formData.append('video_end_offset_sec', endOffsetSec);
        if (clipLength)
            formData.append('video_clip_length', clipLength);
        if (scopes) {
            scopes.forEach((scope) => formData.append('video_embedding_scope', scope));
        }
        try {
            if (file)
                (0, util_1.attachFormFile)(formData, 'video_file', file);
        }
        catch (err) {
            throw err;
        }
        const { id } = await this._post('embed/tasks', formData, options);
        const task = await this.retrieve(id);
        return task;
    }
    async createBulk(modelName, videos, options = {}) {
        const tasks = [];
        for (const videoParams of videos) {
            try {
                const task = await this.create(modelName, videoParams, options);
                tasks.push(task);
            }
            catch (e) {
                console.error(`Error creating task with video: ${e}`);
            }
        }
        return tasks;
    }
    async status(taskId, options = {}) {
        const res = await this._get(`embed/tasks/${taskId}/status`, {}, options);
        return new Models.EmbeddingsTaskStatus(res);
    }
}
exports.EmbedTask = EmbedTask;
class Embed extends resource_1.APIResource {
    constructor(client) {
        super(client);
        this.task = new EmbedTask(client);
    }
    async create({ modelName, text, textTruncate, audioUrl, audioFile, audioStartOffsetSec, imageUrl, imageFile, }, options = {}) {
        if (!text && !audioUrl && !audioFile && !imageUrl && !imageFile) {
            throw new Error('At least one of text, audioUrl, audioFile, imageUrl, imageFile must be provided');
        }
        const formData = new form_data_1.default();
        formData.append('model_name', modelName);
        if (text)
            formData.append('text', text);
        if (textTruncate)
            formData.append('text_truncate', textTruncate);
        if (audioUrl)
            formData.append('audio_url', audioUrl);
        if (imageUrl)
            formData.append('image_url', imageUrl);
        if (audioFile)
            (0, util_1.attachFormFile)(formData, 'audio_file', audioFile);
        if (imageFile)
            (0, util_1.attachFormFile)(formData, 'image_file', imageFile);
        if (audioStartOffsetSec)
            formData.append('audio_start_offset_sec', audioStartOffsetSec);
        const res = await this._post('embed', formData, options);
        return new Models.CreateEmbeddingsResult(res);
    }
}
exports.Embed = Embed;
//# sourceMappingURL=index.js.map